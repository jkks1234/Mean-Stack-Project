{
  "_from": "mongod@^2.0.0",
  "_id": "mongod@2.0.0",
  "_inBundle": false,
  "_integrity": "sha1-zuxLcjBRkOhdb4+smS8VpH6xjHQ=",
  "_location": "/mongod",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongod",
    "fetchSpec": "^2.0.0",
    "name": "mongod",
    "raw": "mongod@^2.0.0",
    "rawSpec": "^2.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongod/-/mongod-2.0.0.tgz",
  "_shasum": "ceec4b72305190e85d6f8fac992f15a47eb18c74",
  "_shrinkwrap": null,
  "_spec": "mongod@^2.0.0",
  "_where": "/Users/ishaandhamija/WebstormProjects/Reach",
  "author": {
    "email": "brandon.zacharie@gmail.com",
    "name": "Brandon Zacharie"
  },
  "bugs": {
    "url": "https://github.com/BrandonZacharie/node-mongod/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "promise-queue": "^2.2.3"
  },
  "deprecated": false,
  "description": "Start and stop a MongoDB server.",
  "devDependencies": {
    "chai": "^3.5.0",
    "coveralls": "^2.11.15",
    "eslint": "^3.13.0",
    "fs-promise": "^1.0.0",
    "istanbul": "^0.4.5",
    "js-yaml": "^3.7.0",
    "mocha": "^3.1.2",
    "remark-cli": "^2.1.0",
    "remark-preset-lint-recommended": "^1.0.0",
    "uuid": "^3.0.1"
  },
  "homepage": "https://github.com/BrandonZacharie/node-mongod#readme",
  "keywords": [
    "manager",
    "mongodb",
    "server"
  ],
  "license": "MIT",
  "main": "Mongod.js",
  "name": "mongod",
  "optionalDependencies": {},
  "readme": "# mongod\n\n[![NPM version](https://img.shields.io/npm/v/mongod.svg)](https://www.npmjs.com/package/mongod)\n[![Build Status](https://img.shields.io/travis/BrandonZacharie/node-mongod/master.svg)](https://travis-ci.org/BrandonZacharie/node-mongod)\n[![Coverage Status](https://img.shields.io/coveralls/BrandonZacharie/node-mongod/master.svg)](https://coveralls.io/github/BrandonZacharie/node-mongod?branch=master)\n[![License](https://img.shields.io/npm/l/redis-server.svg)](https://github.com/BrandonZacharie/node-mongod/blob/master/LICENSE.md)\n\nStart and stop a local MongoDB server in Node.js like a boss.\n\n## Installation\n\n```Bash\n\nnpm install mongod\n\n```\n\n## Usage\n\nThe constructor exported by this module optionally accepts a single argument;\na number or string that is a port or an object for configuration.\n\n### Basic Example\n\n```JavaScript\n\nconst Mongod = require('mongod');\n\n// Simply pass the port that you want a MongoDB server to listen on.\nconst server = new Mongod(27017);\n\nserver.open((err) => {\n  if (err === null) {\n    // You may now connect a client to the MongoDB\n    // server bound to port 27017.\n  }\n});\n\n```\n\n### Configuration\n\n| Property      | Type    | Default | Description\n|:--------------|:--------|:--------|:-----------\n| bin           | String  | mongod  | A path to a MongoDB server binary.\n| conf          | String  |         | A path to a MongoDB server configuration file.\n| dbpath        | String  |         | A path to a to store MongoDB server files.\n| storageEngine | String  |         | A MongoDB storage engine (i.e. wiredTiger).\n| nojournal     | Boolean | false   | A flag to tell MongoDB to disable journaling.\n| port          | Number  | 27017   | A port to bind a MongoDB server to.\n\nA MongoDB server binary must be available. If you do not have one in $PATH,\nprovide a path in configuration.\n\n```JavaScript\n\nconst server = new Mongod({\n  port: 27017,\n  bin: '/opt/local/bin/mongod'\n});\n\n```\n\nYou may use a MongoDB configuration file instead of configuration object\nproperties that are flags (i.e. `dbpath` and `port`). If `conf` is\nprovided, no flags will be passed to the binary.\n\n```JavaScript\n\nconst server = new Mongod({\n  conf: '/path/to/mongodb.conf'\n});\n\n```\n\n### Methods\n\nFor methods that accept `callback`, `callback` will receive an `Error`\nas the first argument if a problem is detected; `null`, if not.\n\n#### Mongod#open()\n\nAttempt to open a MongoDB server. Returns a `Promise`.\n\n##### Promise style `open()`\n\n``` JavaScript\n\nserver.open().then(() => {\n  // You may now connect to the MongoDB server.\n});\n\n```\n\n##### Callback style `open()`\n\n``` JavaScript\n\nserver.open((err) => {\n  if (err === null) {\n    // You may now connect to the MongoDB server.\n  }\n});\n\n```\n\n#### Mongod#close()\n\nClose the associated MongoDB server. Returns a `Promise`. NOTE: Disconnect\nclients prior to calling this method to avoid receiving connection\nerrors from clients.\n\n##### Promise style `close()`\n\n``` JavaScript\n\nserver.close().then(() => {\n  // The MongoDB server is now closed.\n});\n\n```\n\n##### Callback style `close()`\n\n``` JavaScript\n\nserver.close((err) => {\n  // The MongoDB server is now closed.\n});\n\n```\n\n### Properties\n\n#### Mongod#isOpening\n\nDetermine if the instance is starting a MongoDB server; `true` while a\nprocess is spawning, and/or about to be spawned, until the contained MongoDB\nserver either starts or errs.\n\n#### Mongod#isRunning\n\nDetermine if the instance is running a MongoDB server; `true` once a process\nhas spawned and the contained MongoDB server is ready to service requests.\n\n#### Mongod#isClosing\n\nDetermine if the instance is closing a MongoDB server; `true` while a\nprocess is being, or about to be, killed until the contained MongoDB server\neither closes or errs.\n\n### Events\n\n#### stdout\n\nEmitted when a MongoDB server prints to stdout or stderr.\n\n#### opening\n\nEmitted when attempting to start a MongoDB server.\n\n#### open\n\nEmitted when a MongoDB server becomes ready to service requests.\n\n#### closing\n\nEmitted when attempting to stop a MongoDB server.\n\n#### close\n\nEmitted when a MongoDB server closes.\n\n## Credits\n\nA special thanks to @ForbesLindesay for contributing the NPM package name.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/BrandonZacharie/node-mongod.git"
  },
  "scripts": {
    "eslint": "eslint --ignore-path .gitignore **/*.js",
    "lint": "npm run eslint && npm run remark",
    "remark": "remark .",
    "test": "istanbul cover -x test.js _mocha"
  },
  "version": "2.0.0"
}
